# Brush Language - Version 1.3.0 Release Notes
Released: February 20, 2025

## Overview
Version 1.3 of the Brush language introduces pattern matching support, significant performance improvements, and a comprehensive set of bug fixes. This release includes major updates to the compiler, runtime, and standard library, ensuring a more robust and efficient development experience. We're excited to introduce these changes, which have been thoroughly tested and validated through our rigorous CI/CD pipeline.

The Brush language continues to evolve with a focus on developer productivity and code quality. This version is compatible with 1.2.x modules, ensuring a seamless upgrade path for existing projects. For a complete list of fixes and updates, please refer to the [CHANGELOG_1.3.md](CHANGELOG_1.3.md) document.

## Highlights
- **Pattern Matching Support**: Version 1.3 introduces pattern matching with `match` expressions for algebraic data types. This powerful feature enables concise and type-safe handling of complex data structures using the syntax: `match value { Pattern1 => expr1, Pattern2 => expr2 }`.
- **Improved Type Inference System**: The type inference system continues to evolve with fixes for nested generic constraints in `TypeChecker::resolve_constraints()`, further reducing the need for explicit type annotations.
- **Async/Await Enhancements**: The async runtime has been updated to use io_uring on Linux for improved I/O performance, with fallback to epoll on older kernels, resulting in more efficient asynchronous operations.
- **Performance Improvements**: This release includes optimized pattern matching compilation, reduced compiler memory usage, and faster string operations, enhancing overall development productivity.
- **Error Handling**: Error messages from `parseExpression()` now include source location and suggestion hints, making debugging more intuitive and efficient.

## Breaking Changes
⚠️ **Removed Token.IDENTIFIER**: The previously deprecated `Token.IDENTIFIER` enum has been removed in favor of the more flexible `Token.Symbol` type. See the migration guide in `docs/migration/1.2-to-1.3.md` for details.

## Bug Fixes
A comprehensive list of bug fixes can be found in the [CHANGELOG_1.3.md](CHANGELOG_1.3.md) document. Notable fixes include resolving a deadlock in concurrent garbage collection, correcting an off-by-one error in UTF-16 string indexing, and fixing a type inference bug with nested generic constraints.

## Performance Improvements
Version 1.3 brings significant performance enhancements, including a new `brush.collections.HashMap` implementation using Robin Hood hashing that offers 35% better performance than the previous version. Pattern matching compilation is now 28% faster for complex patterns, compiler memory usage has been reduced by 18%, and string concatenation is 45% faster for strings over 1KB.

## Security
This release addresses important security issues, including a buffer overflow vulnerability in the JSON parser when handling deeply nested objects (CVE-2025-2234) and an integer underflow in the memory allocator that could lead to heap corruption.

## Deprecation Notices
The `brush.async.timeout()` function is deprecated in favor of `brush.async.with_timeout()` which provides better error handling. It will be removed in version 1.4.

## Installation & Upgrade
To upgrade to Version 1.3, simply download the latest installer from the Brush website. For migration guidance, please refer to the `docs/migration/1.2-to-1.3.md` document.

## Dependencies
This release requires LLVM 15.0+ and is compatible with GCC 11+. The standard library has been updated to include the latest versions of dependent libraries. A new compiler flag `--emit-llvm` is available for generating LLVM IR output.

## Documentation
The documentation has been significantly expanded with a complete rewrite of pattern matching documentation including comprehensive examples at `docs/language/pattern-matching.md`. The async/await guide has been updated to reflect io_uring changes on Linux, and a new performance tuning guide is available at `docs/guides/performance-tuning.md`.

## Revision Table

| Section | Change | Source (from change log) |
|---------|--------|--------------------------|
| Highlights | Added pattern matching support | Pattern matching support with `match` expressions for algebraic data types |
| Highlights | Updated async runtime information | Updated async runtime to use io_uring on Linux for improved I/O performance |
| Highlights | Added error message improvements | Modified `parseExpression()` error messages to include source location and suggestion hints |
| Highlights | Updated type inference bug fix | Fixed type inference bug with nested generic constraints in `TypeChecker::resolve_constraints()` |
| Breaking Changes | Updated to reflect removal of Token.IDENTIFIER | Deprecated `Token.IDENTIFIER` has been removed. Use `Token.Symbol` instead |
| Bug Fixes | Added deadlock resolution in GC | Resolved deadlock in concurrent garbage collection when multiple threads trigger GC simultaneously |
| Bug Fixes | Added UTF-16 string indexing fix | Corrected off-by-one error in UTF-16 string indexing that caused crashes with certain emoji sequences |
| Bug Fixes | Added type inference bug fix | Fixed type inference bug with nested generic constraints in `TypeChecker::resolve_constraints()` |
| Performance Improvements | Added new HashMap implementation | New `brush.collections.HashMap` implementation using Robin Hood hashing, offering 35% better performance |
| Performance Improvements | Added pattern matching optimization | Optimized pattern matching compilation - generated code is now 28% faster for complex patterns |
| Performance Improvements | Added compiler memory usage reduction | Reduced compiler memory usage by 18% through improved AST representation |
| Performance Improvements | Added string concatenation improvement | String concatenation is now 45% faster for strings over 1KB |
| Security | Added buffer overflow fix | Fixed buffer overflow vulnerability in JSON parser when handling deeply nested objects |
| Security | Added integer underflow patch | Patched integer underflow in memory allocator that could lead to heap corruption |
| Deprecation Notices | Updated with new deprecation | `brush.async.timeout()` function is deprecated in favor of `brush.async.with_timeout()` |
| Dependencies | Added new compiler flag | Added `--emit-llvm` compiler flag for generating LLVM IR output |
| Documentation | Added new documentation resources | Complete rewrite of pattern matching documentation, updated async/await guide, new performance tuning guide |