# VERSION_1.2.md

# Brush Language - Version 1.2.0 Release Notes

Released: March 8, 2025

## Overview

Brush 1.2.0 represents a significant milestone in the language's evolution, focusing on performance optimization, developer ergonomics, and ecosystem stability. This release introduces several new language features while substantially improving the compiler infrastructure and runtime performance.

We're excited to introduce the new async/await paradigm, making asynchronous programming in Brush more intuitive and maintainable. Version 1.2 also brings important improvements to the type system, memory management, and standard library, along with numerous bug fixes and optimizations.

## Highlights

### Async/Await Support

Brush now offers first-class support for asynchronous programming through the new `async` and `await` keywords. Functions can be declared as `async`, allowing them to perform non-blocking operations while maintaining synchronous-like code structure. The runtime scheduler has been enhanced to efficiently manage async task execution across available threads. This feature significantly simplifies code that previously required complex callback chains or promise objects.

```brush
async fn fetchData(url: String) -> Result<Data, Error> {
    let response = await httpClient.get(url);
    return response.parseJson();
}
```

### Enhanced Type Inference

Version 1.2 introduces enhanced type inference for generic functions, significantly reducing the need for explicit type annotations. The compiler now performs bidirectional type checking during the constraint resolution phase, allowing it to infer complex generic types from context. This improvement is particularly noticeable in functional programming patterns involving higher-order functions and closures.

```brush
// Before 1.2:
let result = map<int, string>(numbers, (n: int) => n.toString());

// Now in 1.2:
let result = map(numbers, n => n.toString());
```

### Pattern Matching Improvements

Pattern matching has been extended with destructuring assignments and guard clauses. The new syntax allows for more expressive and concise code when working with complex data structures. Pattern matching now supports nested patterns, or-patterns, and rest patterns, making it a powerful tool for data manipulation.

### Standard Library Expansion

The standard library has been expanded with new modules for date/time manipulation (`brush.time`), file system operations (`brush.fs`), and cryptographic functions (`brush.crypto`). These additions reduce dependency on third-party libraries for common tasks and provide consistent APIs across all supported platforms.

### Memory Management Optimizations

The garbage collector has been completely rewritten, resulting in a 35% reduction in pause times and 20% lower memory overhead. The new generational collector better handles short-lived objects, while the concurrent marking phase minimizes application interruptions. Large applications should see significant improvements in responsiveness and throughput.

## Breaking Changes

⚠️ **String Encoding Change**: The default string encoding has changed from UTF-8 to UTF-16 for better cross-platform compatibility. Existing code that relies on byte-level string operations may need adjustment. See migration guide in docs/migration/1.1-to-1.2.md.

⚠️ **Module Import Syntax**: The import syntax has been standardized to use the `from` keyword consistently. The older dot-notation imports are now deprecated and will be removed in version 1.3. Update your imports as follows:

```brush
// Old syntax (deprecated):
import brush.collections.List;

// New syntax:
import List from "brush.collections";
```

## Bug Fixes

Version 1.2 includes over 40 bug fixes addressing issues in the compiler, runtime, and standard library. Key areas of improvement include the type checker, garbage collector, and concurrency primitives. For a complete list of fixes, see CHANGELOG_1.2.md or issues #1840-#1891 in our issue tracker.

## Performance Improvements

- **Compiler Speed**: Compilation times have been reduced by 22% through improved parsing algorithms and parallel type checking.
- **Runtime Performance**: Overall application performance has improved by 15-18% due to better JIT compilation and optimized memory access patterns.
- **Memory Footprint**: The runtime footprint has been reduced from 8MB to 5.2MB through more efficient data structures and code generation.
- **Standard Library**: Common operations like string manipulation and collection traversal are now 30-40% faster.

## Deprecation Notices

The following features are deprecated in 1.2 and will be removed in version 1.3:

- The `brush.util.legacy` module is now fully deprecated. Use the new `brush.core` equivalents instead.
- The `@deprecated` annotation now generates compiler warnings. Plan to migrate away from APIs marked with this annotation.
- Dynamic imports using `require()` are deprecated in favor of the static import syntax or the new dynamic `import()` expression.

## Installation & Upgrade

Brush 1.2 is compatible with 1.1.x modules but requires recompilation for optimal performance. The compiler will automatically handle most migration tasks, but developers should review the breaking changes section above.

To install Brush 1.2:

```
brush-pkg install brush@1.2.0
```

To upgrade an existing project:

```
cd your-project
brush-pkg upgrade
brush build --migrate
```

## Dependencies

- Requires LLVM 15.0+ for native code generation
- Compatible with GCC 11+ and Clang 13+
- Minimum OS requirements: Windows 10+, macOS 11+, or Linux with glibc 2.31+
- The VSCode extension has been updated to version 0.9.2 to support the new language features

## Acknowledgements

We would like to thank our growing community of contributors who helped make this release possible. Special thanks to the 28 developers who contributed code, documentation, and test cases for version 1.2.

---

# CHANGELOG_1.2.md

## [1.2.0] - 2025-03-08

### Added

- Added async/await syntax for asynchronous programming. This introduces new keywords `async` and `await` along with runtime scheduler improvements. (#1842)

- Implemented enhanced pattern matching with destructuring and guard clauses. Pattern matching now supports nested patterns, or-patterns, and rest patterns. (BRH-289)

- Added new standard library modules: `brush.time`, `brush.fs`, and `brush.crypto`. These provide platform-independent APIs for common operations. [BRH-301]

- Introduce experimental WebAssembly target support. Compile Brush programs to WASM with `brush build --target=wasm`. Thanks to Mike Torres for the initial implementation.

### Changed

- Updated string encoding from UTF-8 to UTF-16 for better cross-platform compatibility. ⚠️ This is a breaking change that may affect byte-level string operations. (#1850)

- Refactored module import syntax to consistently use the `from` keyword. Old dot-notation imports are now deprecated. (BRH-312)

- Improved type inference for generic functions, reducing need for explicit type annotations. The compiler now performs bidirectional type checking. [BRH-290]

- Update documentation for async/await syntax, previous examples was using deprecated callback style

### Fixed

- Fixed compiler crash when using nested lambda expressions with closure capture. The issue occurred in `eval_context()` when scope resolution failed for shadowed variables (fixes #1847).

- Resolved SEGFAULT in garbage collector during concurrent object allocation. Reported by Emma Rodriguez <e.rodriguez@techcorp.io>

- Fix race condition in thread pool scheduler causing deadlocks under high concurrency. The issue was in `ThreadPool.dispatch()` when all worker threads were busy. (#1863)

- Fixed type inference bug with union types containing nullable members (E0308). The compiler now correctly handles `T | null` in conditional expressions. [BRH-320]

- Patched memory leak in the file handle management system. File descriptors weren't properly closed when exceptions were thrown during I/O operations. (fixes #1872)

- Fixed incorrect line numbers in error messages when source files contained tabs. Error positions now correctly account for tab width settings. Reported by Alex Johnson <alex.j@devmail.net>

### Performance

- Completely rewrote garbage collector, resulting in 35% reduction in pause times and 20% lower memory overhead. The new implementation uses generational collection with concurrent marking. (#1855)

- Performance improvement in string interpolation - now 23% faster for strings with 10+ variables (#2301)

- Optimized the compiler's lexer and parser, reducing compilation times by 22%. The improvements are most noticeable on large source files. [BRH-315]

- Improved JIT compilation of hot functions, resulting in 15-18% better runtime performance for CPU-intensive operations. Fixed by Sarah Chen <s.chen@brushlang.org>

### Security

- Fixed potential buffer overflow in `brush.net.Socket.receive()` when handling malformed packets. This vulnerability could allow remote code execution (CVE-2025-1234).

- Address integer overflow in date parsing function that could lead to denial of service. The issue was in `Time.parseISO()` at brush.runtime.time:142 when parsing malformed date strings.

### Documentation

- Updated all standard library documentation to reflect new async/await patterns. Examples now show modern usage patterns.

- Expanded developer guide with new sections on memory management best practices and performance optimization techniques. (#1890)