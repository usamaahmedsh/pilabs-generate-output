```markdown
# Brush Language - Version 1.2.0 Release Notes

Released: January 15, 2025

## Overview

Version 1.2 of the Brush programming language is a significant milestone that brings a host of new features, performance optimizations, and critical bug fixes to enhance your development experience. With this release, we continue to prioritize the needs of developers, delivering both improvements to existing functionalities and exciting new capabilities that empower you to build more efficient and robust applications.

This release includes major advancements in our concurrency model, enhanced string handling, and an improved garbage collection system. We've also addressed numerous bugs to improve stability and performance across different platforms. Version 1.2 is compatible with 1.1.x modules, ensuring a smooth transition for existing projects.

## Highlights

### Enhanced Concurrency Model

Developers can now leverage the new `brush.async.timeout(duration: int, callback: fn)` function, providing more control over asynchronous operations. This function utilizes non-blocking I/O to efficiently manage timeouts in concurrent tasks, reducing overall latency in networked applications.

### Improved Garbage Collection

The garbage collector has been optimized for concurrent workloads, minimizing pause times during collection cycles. This is achieved through a new generational approach that separates short-lived objects from long-lived ones, resulting in a 20% improvement in memory management efficiency.

### String Interpolation Enhancements

We're excited to introduce improved string interpolation, which is now 30% faster for complex strings with multiple variables. The parser has been rewritten to efficiently handle string concatenation, reducing runtime overhead.

### New Standard Library Functions

The standard library now includes new I/O functions for enhanced file manipulation, such as `readFileSync(path: str): str`, which provides a synchronous read mechanism for text files, ensuring atomic operations when accessing file data.

## Breaking Changes

⚠️ **String Encoding Change**: The default string encoding has changed from UTF-8 to UTF-16 for Windows compatibility. Existing code that relies on byte-level string operations may need adjustment. See migration guide in `docs/migration/1.1-to-1.2.md`.

## Bug Fixes

For a complete list of fixes, see [CHANGELOG_1.2.md](CHANGELOG_1.2.md). This version resolves several critical issues, including runtime crashes and incorrect type resolution in complex expressions.

## Performance Improvements

This release features a 15% reduction in compile time due to optimizations in the type inference engine. The binary size has also been reduced by 40%, lowering the runtime footprint from 8MB to 5.2MB.

## Deprecation Notices

Several legacy APIs have been marked as deprecated and will be removed in version 1.3. Please refer to the documentation for guidance on updating your code to use the latest APIs.

## Installation & Upgrade

Upgrading from version 1.1.x to 1.2 is straightforward and backward compatible with most modules. Ensure that your development environment meets the updated dependency requirements.

## Dependencies

- Requires LLVM 15.0+
- Compatible with GCC 11+
- Supports Windows, macOS, and Linux platforms

Please check the Brush repository for updated installation scripts and further details on dependency management.

---

```markdown
## [1.2.0] - 2025-01-15

### Added
- Added support for async function `brush.async.timeout(duration: int, callback: fn)`, providing fine-grained control over timeout operations in concurrent code (#1840).
- Introduced new standard library function `readFileSync(path: str): str` for synchronous file reading, allowing atomic access to file content without race conditions.

### Changed
- Changed default string encoding from UTF-8 to UTF-16 to improve compatibility with Windows systems (fixes #1841). Ensure byte-level operations are reviewed in existing code.
- Updated lexer to handle identifier parsing more robustly by revising `Token.IDENTIFIER` recognition logic in `src/compiler/lexer.br`.

### Fixed
- Fixed a memory leak in the garbage collector during concurrent execution. The issue was traced to improper handling of object references in `gc_collect()`. Reported by Sarah Chen <s.chen@brushlang.org>
- Resolved incorrect type inference in `parseExpression()` when dealing with nested generics, preventing ERR_INVALID_TOKEN errors (thanks to Mike Torres for reporting).
- Fixed SEGFAULT in recursive function calls due to stack overflow in specific edge cases. The stack trace indicated an issue at `brush.runtime.eval:142`.

### Security
- Patched vulnerability in authentication module where improper session management could lead to unauthorized access (BRH-302).

### Deprecated
- Deprecated old string formatting methods in favor of the enhanced string interpolation system. Deprecated functions will be removed in version 1.3.

### Performance
- Performance optimization in string interpolation processing, now achieving 30% faster execution times for complex expressions involving multiple variables (#1847).

### Documentation
- Updated documentation to reflect changes in async/await syntax, replacing outdated examples with modern, recommended patterns (thanks to Emma Rodriguez <e.rodriguez@techcorp.io>).

```
