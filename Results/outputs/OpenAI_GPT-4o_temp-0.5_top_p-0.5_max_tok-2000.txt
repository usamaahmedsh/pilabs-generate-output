```markdown
# Brush Language - Version 1.2.0 Release Notes

Released: January 15, 2025

## Overview

Version 1.2 of the Brush programming language is a significant update that brings a host of new features, optimizations, and bug fixes to enhance the developer experience. This release focuses on improving performance, expanding language capabilities, and addressing community-reported issues. Developers can now take advantage of improved concurrency support, enhanced type inference, and a more robust standard library.

We're excited to introduce several major enhancements that will streamline your development workflow and increase the efficiency of your Brush applications. With this release, Brush continues to evolve as a powerful tool for modern software development.

## Highlights

### Enhanced Concurrency Model

This release includes a revamped concurrency model, allowing developers to write more efficient and scalable asynchronous code. The new `brush.async.timeout(duration: int, callback: fn)` function provides a straightforward way to handle timeouts in asynchronous operations. This improvement leverages a more efficient event loop mechanism, reducing the overhead of context switching.

### Improved Type Inference System

Version 1.2 introduces enhanced type inference for generic functions, significantly reducing the need for explicit type annotations. The compiler now performs bidirectional type checking during the constraint resolution phase, allowing it to infer complex generic types from context. This improvement is particularly noticeable in functional programming patterns involving higher-order functions and closures.

### Expanded Standard Library

The standard library has been expanded with new modules for file I/O and network operations. These additions provide developers with more tools to handle common tasks directly within Brush. For example, the new `stdlib/io.brush` module simplifies file manipulation with functions like `readFile(path: str)` and `writeFile(path: str, content: str)`.

### Performance Improvements

Version 1.2 brings a 15% reduction in compile time and a 40% smaller binary size, thanks to optimizations in the code generation phase. These improvements are achieved through better inlining strategies and dead code elimination techniques.

## Breaking Changes

⚠️ **String Encoding Change**: The default string encoding has changed from UTF-8 to UTF-16 for Windows compatibility. Existing code that relies on byte-level string operations may need adjustment. See migration guide in `docs/migration/1.1-to-1.2.md`.

## Bug Fixes

This release addresses numerous bugs reported by the community. For a complete list of fixes, see CHANGELOG_1.2.md.

## Performance Improvements

- 15% reduction in compile time
- 40% smaller binary size
- Runtime footprint reduced from 8MB to 5.2MB

## Deprecation Notices

The `oldNetworkModule` is deprecated and will be removed in version 1.3. Developers are encouraged to transition to the new `network` module introduced in this release.

## Installation & Upgrade

To upgrade to Brush 1.2, follow the installation instructions in the `INSTALL.md` file. Developers upgrading from 1.1.x should note the changes in string encoding and update their code accordingly.

## Dependencies

- Requires LLVM 15.0+
- Compatible with GCC 11+

For more details on the changes and improvements in this release, please refer to the complete changelog in CHANGELOG_1.2.md.

---

## [1.2.0] - 2025-01-15

### Added

- Introduced `brush.async.timeout(duration: int, callback: fn)` for handling asynchronous timeouts efficiently (#1840).
- Expanded standard library with new `stdlib/io.brush` module for enhanced file I/O operations (fixes #1852).

### Changed

- Updated default string encoding from UTF-8 to UTF-16 for better Windows compatibility (see #1845).
- Modified `parseExpression()` to improve error handling and provide more descriptive error messages (E0308).

### Fixed

- Fixed a memory leak in `gc_collect()` during concurrent object allocation. The issue was identified in the garbage collector's mark-and-sweep phase (fixes #1876).
- Resolved SEGFAULT in garbage collector during concurrent object allocation. Reported by Emma Rodriguez <e.rodriguez@techcorp.io>
- Corrected an issue where `Token.IDENTIFIER` was not recognized in certain contexts, causing parsing errors (ERR_INVALID_TOKEN). Thanks to Mike Torres for reporting.

### Security

- Patched a vulnerability in the authentication module that allowed unauthorized access under specific conditions (BRH-302).

### Deprecated

- Deprecated `oldNetworkModule` in favor of the new `network` module. This module will be removed in version 1.3 (#1880).

### Performance

- Performance improvement in string interpolation - now 23% faster for strings with 10+ variables (#2301).
- Optimized `eval_context()` to reduce stack usage by 20%, improving runtime efficiency in recursive function calls.

### Documentation

- Update documentation for async/await syntax, previous examples was using deprecated callback style.
- Revised installation guide to include steps for setting up the new concurrency model (reported by John Smith <jsmith@email.com>).

For more detailed information on each change, please refer to the issue tracker and the relevant pull requests.
```