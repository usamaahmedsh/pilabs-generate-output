# VERSION_1.2.md

# Brush Language - Version 1.2.0 Release Notes

Released: March 8, 2025

## Overview

Brush 1.2.0 represents a significant milestone in the language's evolution, focusing on performance optimization, developer ergonomics, and ecosystem stability. This release introduces several new language features while substantially improving the compiler's type system and runtime performance.

We're excited to introduce the new async/await syntax, making asynchronous programming in Brush more intuitive and less error-prone. Additionally, version 1.2 brings important memory management improvements and compiler optimizations that reduce both compilation time and runtime overhead.

## Highlights

### Async/Await Pattern

Brush now supports first-class async/await syntax for handling asynchronous operations. The runtime implements this feature using a cooperative task scheduler that efficiently manages execution contexts without blocking the main thread. This eliminates the "callback hell" problem common in earlier versions while maintaining backward compatibility with existing callback-based code.

```brush
async fn fetchData(url: String) -> Result<Data, Error> {
    let response = await httpClient.get(url);
    return response.parse();
}
```

### Enhanced Type Inference

Version 1.2 introduces enhanced type inference for generic functions, significantly reducing the need for explicit type annotations. The compiler now performs bidirectional type checking during the constraint resolution phase, allowing it to infer complex generic types from context. This improvement is particularly noticeable in functional programming patterns involving higher-order functions and closures.

```brush
// Before 1.2:
let result = map<int, string>(numbers, (n: int): string => n.toString());

// Now in 1.2:
let result = map(numbers, n => n.toString());
```

### Pattern Matching Enhancements

Pattern matching has been extended to support destructuring of nested data structures and tuple types. The compiler now performs exhaustiveness checking on pattern matches, providing compile-time safety for enum variants and union types. This feature integrates seamlessly with the type system to catch potential runtime errors during compilation.

### Improved Memory Management

The garbage collector has been completely rewritten with a generational approach that reduces collection pauses by up to 75%. The new GC implementation features concurrent marking and incremental compaction, significantly improving application responsiveness for memory-intensive workloads. Runtime memory footprint has been reduced from 8.2MB to 5.7MB for typical applications.

### Standard Library Expansion

The standard library has been expanded with new modules for date/time handling, regular expressions, and cryptographic operations. The `brush.collections` namespace now includes persistent immutable data structures optimized for functional programming patterns. All standard library functions now include comprehensive documentation with usage examples.

## Breaking Changes

⚠️ **String Encoding Change**: The default string encoding has changed from UTF-8 to UTF-16 for better cross-platform compatibility. Existing code that relies on byte-level string operations may need adjustment. See migration guide in docs/migration/1.1-to-1.2.md.

⚠️ **Module Resolution**: The module resolution algorithm has been updated to prioritize local dependencies over global ones. Projects using implicit global imports may experience compilation errors. Use the `--legacy-imports` flag temporarily while updating your code.

## Bug Fixes

Version 1.2 addresses 32 bugs reported by the community, including several critical issues in the compiler's type checker and runtime memory management. Notable fixes include resolution of the long-standing parser ambiguity with nested lambda expressions and elimination of memory leaks in the event loop implementation. For a complete list of fixes, see CHANGELOG_1.2.md.

## Performance Improvements

- **Compiler Speed**: Compilation time reduced by 22% through improved incremental compilation and parallel type checking.
- **Runtime Performance**: Optimized method dispatch resulting in 15-30% faster execution for object-oriented code.
- **Memory Usage**: Reduced heap fragmentation and improved memory locality, resulting in 18% lower memory consumption.
- **Binary Size**: Executable size reduced by 12% through better dead code elimination and optimized LLVM IR generation.

## Deprecation Notices

The following features are deprecated in 1.2 and will be removed in version 1.3:

- The `brush.util.legacy` module is now deprecated. Use the new utilities in `brush.common` instead.
- Old-style callback syntax for asynchronous operations. Migrate to the new async/await pattern.
- The `--no-strict` compiler flag will be removed. All code will use strict type checking by default.

## Installation & Upgrade

Brush 1.2 is compatible with 1.1.x modules but requires recompilation. The compiler will automatically handle most migration cases, but developers should review the breaking changes section before upgrading.

```bash
# Install fresh
brew install brushlang

# Upgrade existing installation
brew upgrade brushlang

# Or using the official installer
curl -sSL https://get.brushlang.org | sh -s -- --version 1.2.0
```

Developers upgrading from 1.1.x should note that the project configuration file format has changed. Run `brush migrate-config` to automatically update your project files.

## Dependencies

- Requires LLVM 16.0+ (up from 15.0 in version 1.1)
- Compatible with GCC 12+ and Clang 14+
- Minimum OS requirements: Windows 10+, macOS 11+, or Linux with glibc 2.31+
- The VSCode extension has been updated to version 0.9.2 to support the new language features

For more detailed information about this release, including API documentation and migration guides, visit the [official documentation](https://docs.brushlang.org/1.2/).

# CHANGELOG_1.2.md

## [1.2.0] - 2025-03-08

### Added

- Added async/await syntax for asynchronous programming. This replaces the callback-based approach with a more intuitive syntax based on promises. (#1842)

- Implemented pattern matching for nested data structures and tuples. The compiler now performs exhaustiveness checking to ensure all possible patterns are handled. [BRH-312]

- Add new `brush.collections` module with immutable data structures (Map, Set, Vector). These structures provide O(log n) performance characteristics for most operations. (fixes #1901)

- New date/time API in `brush.time` module with timezone support and ISO-8601 parsing. Thanks to Mike Torres for contributing this feature.

### Changed

- Updated string encoding from UTF-8 to UTF-16 for better cross-platform compatibility. ⚠️ This is a breaking change for code that relies on byte-level string operations. [BRH-290]

- Change module resolution algorithm to prioritize local dependencies over global ones. Use `--legacy-imports` flag if needed during migration. (#1876)

- Improved type inference for generic functions, reducing the need for explicit type annotations. The compiler now uses bidirectional type checking during constraint resolution. [BRH-305]

### Fixed

- Fixed compiler crash when using nested lambda expressions with closure capture. The issue occurred in `eval_context()` when scope resolution failed for shadowed variables (fixes #1847).

- Resolved SEGFAULT in garbage collector during concurrent object allocation. The error manifested as `SEGFAULT_0x7f` in multithreaded applications. Reported by Emma Rodriguez <e.rodriguez@techcorp.io>

- Fix type error E0308 when using optional chaining with generic types. The type checker was incorrectly handling nullable type constraints. (#1855)

- Fixed parser ambiguity with trailing commas in function arguments. Previously caused `ERR_INVALID_TOKEN` at `brush.compiler.parser:427`. Reported by John Smith <jsmith@email.com>

- Patched memory leak in event loop when using timers with circular references. The leak was occurring at `brush.runtime.scheduler:203` during context switching. (#1903)

### Performance

- Rewrote garbage collector with generational approach, reducing collection pauses by up to 75%. The new implementation features concurrent marking and incremental compaction. [BRH-298]

- Performance improvement in string interpolation - now 23% faster for strings with 10+ variables (#2301)

- Optimized method dispatch resulting in 15-30% faster execution for object-oriented code. The improvement comes from better inline caching in the VM. Fixed by Sarah Chen <s.chen@brushlang.org>

- Reduced binary size by 12% through better dead code elimination and optimized LLVM IR generation. (#1922)

### Documentation

- Update documentation for async/await syntax, previous examples was using deprecated callback style

- Comprehensive documentation added for all standard library functions with usage examples. (#1888)

- Fixed incorrect examples in the pattern matching tutorial. Thanks to Alex Johnson for reporting.

### Security

- Fixed potential buffer overflow in `parseInteger()` when handling malformed input strings. This vulnerability could lead to arbitrary code execution (CVE-2025-1234).