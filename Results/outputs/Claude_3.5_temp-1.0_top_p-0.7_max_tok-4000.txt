# VERSION_1.2.md

# Brush Language - Version 1.2.0 Release Notes

Released: March 8, 2025

## Overview

Brush Language 1.2.0 represents a significant milestone in our journey to create a modern, efficient, and developer-friendly programming language. This release focuses on performance optimizations, enhanced type safety, and improved developer experience while maintaining backward compatibility with most 1.1.x codebases.

We're excited to introduce a completely redesigned asynchronous programming model that simplifies concurrent code without sacrificing performance. Version 1.2 also brings substantial improvements to the compiler infrastructure, resulting in faster compilation times and more helpful error messages.

## Highlights

### Revamped Asynchronous Programming Model

The new async/await syntax provides a more intuitive way to write non-blocking code compared to the previous callback-based approach. The runtime now manages async contexts using a lightweight fiber-based implementation that reduces memory overhead by 35%. This approach eliminates callback hell while maintaining compatibility with existing event-driven APIs.

```brush
// New async/await syntax
async fn fetchData(url: String) -> Result<Data, Error> {
    let response = await httpClient.get(url);
    return response.parseJson();
}
```

### Enhanced Type Inference System

Version 1.2 introduces improved type inference for generic functions, significantly reducing the need for explicit type annotations. The compiler now performs bidirectional type checking during constraint resolution, allowing it to infer complex generic types from context. This improvement is particularly noticeable in functional programming patterns involving higher-order functions and closures.

```brush
// Before: Explicit type annotations required
let result = map<int, string>(numbers, (n: int): string => n.toString());

// After: Types inferred automatically
let result = map(numbers, n => n.toString());
```

### Compiler Performance Improvements

The Brush compiler has been extensively optimized, resulting in a 28% reduction in compilation time for large projects. The parallel compilation pipeline now utilizes a work-stealing scheduler that dynamically adjusts thread allocation based on available CPU cores. Additionally, incremental compilation now caches intermediate representations, reducing rebuild times by up to 65% for minor code changes.

### Interactive Debugging Support

Brush 1.2 introduces first-class support for interactive debugging through the new Debug Protocol Interface (DPI). The language runtime now exposes hooks for breakpoints, variable inspection, and step-through execution that integrate with major IDEs and editor extensions. Developers can now debug Brush applications with the same tools they use for other languages.

### Standard Library Enhancements

The standard library has been expanded with new modules for regular expressions (`std.regex`), cryptography (`std.crypto`), and improved internationalization support (`std.i18n`). The collections API has been redesigned for better performance and more consistent interfaces across different container types.

## Breaking Changes

⚠️ **String Interpolation Syntax**: The string interpolation syntax has changed from `"Hello {name}"` to `"Hello ${name}"` for consistency with template literals in other languages. The compiler will emit warnings for the old syntax in 1.2 and it will be removed in 1.3.

⚠️ **Deprecated Modules Removed**: The previously deprecated modules `std.compat` and `std.legacy` have been removed as scheduled. Code relying on these modules should migrate to their modern equivalents as described in docs/migration/deprecated-modules.md.

## Bug Fixes

Version 1.2 addresses 42 bugs reported by the community, including several critical issues in the garbage collector, type system, and standard library. Notable fixes include resolving memory leaks in the async runtime, eliminating race conditions in the concurrent collections, and fixing parser errors with nested generic types. For a complete list of fixes, see CHANGELOG_1.2.md.

## Performance Improvements

- **Memory Usage**: Runtime footprint reduced from 8.3MB to 5.7MB through optimized data structures and smarter memory allocation strategies.
- **Garbage Collection**: New generational GC algorithm reduces collection pauses by 40% and improves throughput by 15%.
- **String Operations**: String manipulation functions are now 23-30% faster due to optimized UTF-8 handling and SIMD acceleration where available.
- **Compiler Throughput**: Large projects (>100k LOC) compile 28% faster with 65% faster incremental builds.

## Deprecation Notices

The following features are deprecated in 1.2 and will be removed in version 1.3:

- The `brush.async.callback()` function is deprecated in favor of the new async/await syntax.
- The `--legacy-gc` compiler flag is deprecated as the new garbage collector is now the default.
- The `std.collections.OldMap` class is deprecated in favor of the more efficient `std.collections.HashMap`.

## Installation & Upgrade

Brush 1.2 can be installed using the standard package managers:

```
# Using brushpm
brushpm install brush@1.2.0

# Using system package managers
brew install brush@1.2
apt install brush-lang-1.2
```

Developers upgrading from 1.1.x should run the migration assistant to automatically update deprecated syntax:

```
brush migrate --from=1.1 --to=1.2 path/to/project
```

## Dependencies

- Requires LLVM 16.0+ for optimal performance
- Compatible with GCC 12+ and Clang 14+
- Minimum OS requirements: Windows 10+, macOS 11+, or Linux with glibc 2.31+
- The VSCode extension has been updated to version 0.9.2 to support the new debugging protocol

## Community Contributions

Brush 1.2 includes contributions from 37 community developers. We extend our sincere gratitude to everyone who submitted pull requests, reported issues, or participated in design discussions. Special thanks to the performance optimization team who worked tirelessly to improve compilation speed and runtime efficiency.

For more information about Brush Language, visit our website at https://brushlang.org or join our community on Discord.

# CHANGELOG_1.2.md

## [1.2.0] - 2025-03-08

### Added

- Added new async/await syntax for simplified asynchronous programming. The implementation uses lightweight fibers instead of OS threads for better performance. (#1840)

- Introduced Debug Protocol Interface (DPI) for interactive debugging support in IDEs and editors. The protocol is documented at docs/debugging/protocol.md. [BRH-302]

- Add new `std.regex` module with support for PCRE-compatible regular expressions. Thanks to Michael Wong <mwong@regex-expert.com> for the implementation.

- Implemented bidirectional type inference for generic functions, reducing the need for explicit type annotations. This enhancement improves developer experience when working with higher-order functions. (fixes #1872)

### Changed

- Changed string interpolation syntax from `"{var}"` to `"${var}"` for consistency with other languages. The old syntax is deprecated and will be removed in 1.3.0. (#1903)

- Update standard library collections API for more consistent interfaces across container types. See migration guide at docs/migration/collections-api.md.

- Improved error messages for type mismatch errors, now showing expected vs actual types with highlighted code snippets. [BRH-329]

### Fixed

- Fixed memory leak in async runtime when promises were created but never awaited. The issue was in `async_context_cleanup()` which failed to properly track detached promises. (#1923)

- Resolved SEGFAULT in garbage collector during concurrent object allocation that occurred at brush.runtime.gc_collect:142 when multiple threads triggered collection simultaneously. Reported by Emma Rodriguez <e.rodriguez@techcorp.io>

- Fix parser crash when processing deeply nested generic types with more than 5 levels of nesting. The issue was in `parseExpression()` which had a hardcoded recursion limit. (fixes #1847)

- Fixed race condition in concurrent collections that could lead to DEADLOCK_0x3F when multiple threads modified the same collection. The fix implements proper lock ordering in `ConcurrentHashMap`. [BRH-315]

- Patched type inference bug that caused ERR_INVALID_TOKEN when using lambda expressions with captured variables in generic contexts. (#1931)

### Performance

- Optimized garbage collector with new generational algorithm, reducing collection pauses by 40% and improving throughput by 15%. (#1908)

- Performance improvement in string interpolation - now 23% faster for strings with 10+ variables. The optimization uses a single-pass tokenizer instead of multiple string splits. (#2301)

- Reduced memory usage in the compiler's symbol table by implementing a more compact representation for common types. Memory footprint decreased by 35% for large projects. Reported by Alex Chen <a.chen@memory-optimization.net>

### Security

- Fixed potential buffer overflow in `std.io.readBytes()` when reading from untrusted input streams. The vulnerability could allow arbitrary code execution (CVE-2025-1234). [BRH-350]

- Updated bundled OpenSSL to version 3.2.1 to address multiple security vulnerabilities. (#1967)

### Deprecated

- Deprecated `brush.async.callback()` function in favor of the new async/await syntax. Will be removed in 1.3.0.

- The `--legacy-gc` compiler flag is deprecated as the new garbage collector is now the default. Fixed by Sarah Chen <s.chen@brushlang.org>

- Deprecated `std.collections.OldMap` class in favor of the more efficient `std.collections.HashMap`. Migration guide available at docs/migration/collections.md.

### Documentation

- Update documentation for async/await syntax, previous examples was using deprecated callback style. (#1920)

- Completely revised the type system documentation with new examples and explanations of the enhanced type inference system. See docs/type-system/inference.md.

- Fixed broken links and outdated examples in the standard library documentation. Reported by Jason Miller <jmiller@brushlang.org>