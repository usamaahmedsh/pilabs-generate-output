```markdown
# Brush Language - Version 1.2.0 Release Notes

Released: January 15, 2025

## Overview

Version 1.2 of the Brush programming language brings a host of new features and improvements aimed at enhancing developer productivity and code performance. This release focuses on expanding the language's capabilities with new syntax and library enhancements while addressing crucial bug fixes and performance optimizations. Developers can now leverage improved type inference, new asynchronous programming constructs, and a more efficient runtime environment.

We're excited to introduce these advancements that not only streamline coding practices but also optimize execution, making Brush an even more powerful tool for modern software development. This version maintains backward compatibility with the 1.1.x series, ensuring a smooth transition for existing projects.

## Highlights

### Enhanced Type Inference

This release includes an improved type inference system for generic functions, significantly reducing the need for explicit type annotations. The compiler now utilizes bidirectional type checking in the constraint resolution phase, allowing it to infer complex generic types from context. This is particularly beneficial for functional programming patterns involving higher-order functions and closures.

### Asynchronous Programming Enhancements

Brush 1.2 introduces new asynchronous programming constructs, including the `brush.async.timeout(duration: int, callback: fn)` function. This allows developers to handle timeouts more efficiently in asynchronous workflows. The function leverages the event loop to manage callback execution without blocking the main thread.

```brush
brush.async.timeout(5000, || {
    println("Timeout reached!");
});
```

### Performance Improvements

Significant performance improvements have been made, with a focus on the garbage collector and string interpolation processes. The garbage collector now operates with a 20% reduction in memory overhead, and string interpolation is up to 23% faster for strings with 10 or more variables. These optimizations contribute to a more responsive runtime environment, especially in memory-intensive applications.

### New Standard Library Functions

Several new functions have been added to the standard library, enhancing the language's utility and ease of use. Notable additions include `stdlib/io.brush` for improved I/O operations and `stdlib/math.brush` for advanced mathematical computations.

## Breaking Changes ⚠️

- **String Encoding Change**: The default string encoding has been changed from UTF-8 to UTF-16 to improve compatibility with Windows systems. Developers upgrading from 1.1.x should be aware that code relying on byte-level string operations may require adjustments. For detailed migration guidance, refer to docs/migration/1.1-to-1.2.md.

## Bug Fixes

A comprehensive list of bug fixes is available in the [CHANGELOG_1.2.md](CHANGELOG_1.2.md). Key fixes address compiler stability, garbage collector reliability, and parser accuracy.

## Performance Improvements

- Runtime footprint reduced from 8MB to 5.2MB.
- Compile time reduced by 15% through improved AST processing.

## Deprecation Notices

- The `oldCallbackStyle()` function is deprecated and will be removed in version 1.3. Developers are encouraged to use the new async/await syntax.

## Installation & Upgrade

To upgrade to Brush 1.2, ensure that your environment meets the updated dependency requirements, including LLVM 15.0+ and GCC 11+. For detailed installation instructions, refer to the official documentation.

## Dependencies

- Requires LLVM 15.0+ for optimal performance.
- Compatible with GCC 11+ for compiling native extensions.

---

```markdown
## [1.2.0] - 2025-01-15

### Added

- Introduced `brush.async.timeout(duration: int, callback: fn)` for managing asynchronous timeouts efficiently (#1923).
- Added new functions in `stdlib/io.brush` for enhanced file handling capabilities.

### Changed

- Updated the default string encoding from UTF-8 to UTF-16 for better Windows compatibility. This may affect byte-level operations. (See #1901)
- Improved type inference mechanism in the compiler to support complex generics without explicit annotations (fixes #1840).

### Fixed

- Fix compiler crash when using nested lambda expressions with closure capture. The issue was in `eval_context()` due to scope resolution failure (fixes #1847).
- Resolved SEGFAULT in garbage collector during concurrent object allocation. Reported by Emma Rodriguez <e.rodriguez@techcorp.io>
- Addressed memory leak in `gc_collect()` function, improving memory management during runtime. Thanks to Mike Torres for reporting (#1876).

### Performance

- Performance improvement in string interpolation - now 23% faster for strings with 10+ variables (#2301).
- Reduced runtime memory footprint from 8MB to 5.2MB through optimized memory allocation strategies.

### Deprecated

- Deprecated `oldCallbackStyle()` in favor of new async/await syntax. Will be removed in version 1.3 (BRH-302).

### Documentation

- Update documentation for async/await syntax, previous examples was using deprecated callback style.
- Added migration guide for transitioning from version 1.1.x to 1.2 in docs/migration/1.1-to-1.2.md.

### Security

- Patched potential security vulnerability in `Token.IDENTIFIER` parsing that could lead to ERR_INVALID_TOKEN errors. (fixes #203)

### Miscellaneous

- Fixed typo in error message for E0308, improving clarity for developers.
- Standardized error codes across the lexer module for better debugging experience (src/compiler/lexer.br). Fixed by Sarah Chen <s.chen@brushlang.org>
```
