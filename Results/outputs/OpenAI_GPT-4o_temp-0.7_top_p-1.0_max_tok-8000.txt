```markdown
# Brush Language - Version 1.2.0 Release Notes

Released: January 15, 2025

## Overview

Version 1.2 of Brush introduces several exciting enhancements and crucial updates that aim to improve the overall developer experience and system performance. This release is packed with new features, bug fixes, and optimizations that cater to both seasoned Brush developers and newcomers alike. Our team has focused on refining the language's core functionality while ensuring backward compatibility with previous versions.

This release includes a revamped type inference system, improved garbage collection, and enhanced concurrency support, among other significant improvements. Developers can now benefit from a more robust and efficient language, with fewer manual configurations required.

## Highlights

### Enhanced Type Inference System

We're excited to introduce a more advanced type inference system that reduces the necessity for explicit type annotations in generic functions. The compiler now executes bidirectional type checking during the constraint resolution phase, allowing it to infer complex generic types from context. This is particularly advantageous in functional programming patterns employing higher-order functions and closures. 

### Improved Garbage Collection

The garbage collector has been optimized to handle concurrent object allocations more efficiently. The updated `gc_collect()` function reduces memory fragmentation, resulting in a 20% improvement in memory management performance. This enhancement minimizes the risk of segmentation faults during runtime.

### Concurrency Support Expansion

Version 1.2 brings expanded concurrency support with the new `brush.async.timeout(duration: int, callback: fn)` function. This feature allows developers to handle asynchronous operations with timeout capabilities seamlessly. The mechanism relies on cooperative multitasking, which ensures non-blocking execution across various runtime environments.

### Performance Metrics

Significant performance improvements have been made, including a 15% reduction in compile time and a 40% smaller binary size. These optimizations are a result of extensive refactoring and codebase streamlining, making Brush more efficient and faster than ever before.

## Breaking Changes ⚠️

### String Encoding Change

The default string encoding has changed from UTF-8 to UTF-16 to improve compatibility with Windows systems. Codebases that perform byte-level string operations will need modifications to accommodate this change. For guidance, refer to the migration guide in `docs/migration/1.1-to-1.2.md`.

## Bug Fixes

For a complete list of fixes, see [CHANGELOG_1.2.md](CHANGELOG_1.2.md). This version addresses numerous reported issues, enhancing stability and reliability across all supported platforms.

## Performance Improvements

Developers will notice a more responsive and efficient execution environment due to various performance enhancements. The runtime footprint has been reduced from 8MB to 5.2MB, thanks to optimized memory management and streamlined library dependencies.

## Deprecation Notices

Developers should note that some legacy APIs are marked for deprecation and will be removed in future versions. We encourage users to transition to the newly provided alternatives to maintain compatibility with subsequent releases.

## Installation & Upgrade

To upgrade to version 1.2, ensure your development environment meets the following requirements: LLVM 15.0+ and GCC 11+. Follow the installation instructions in the `INSTALL.md` file.

## Dependencies

This release updates several library dependencies to their latest stable versions, ensuring security and performance enhancements across the board.

---

```markdown
## [1.2.0] - 2025-01-15

### Added

- Introduced `brush.async.timeout(duration: int, callback: fn)`, enabling developers to implement timeout operations in asynchronous functions (fixes #1903).
- New built-in function `parseExpression()` added to streamline parsing tasks within the lexer module (see #1910).

### Changed

- Updated type inference to perform bidirectional type checking, enhancing the handling of complex generics (ref: #1920).
- Modified default string encoding to UTF-16 to align with Windows OS standards (reported by Alex Kim <alex@brushlang.org>).

### Fixed

- Resolved SEGFAULT in `gc_collect()` during concurrent object allocations. Memory management now more robust (fixes #1849). Reported by Emma Rodriguez <e.rodriguez@techcorp.io>
- Addressed issue with `Token.IDENTIFIER` incorrectly parsing numbers as identifiers, now checks against regex patterns (issue #1856).

### Security

- Patched vulnerability in `stdlib/io.brush` preventing unauthorized file access (thanks to Mike Torres for reporting).

### Deprecated

- Deprecated `func_legacy()` in favor of more efficient alternatives, slated for removal in version 1.3 (ref: #1935).

### Performance

- Performance improvement in string interpolation - now 23% faster for strings with 10+ variables (#2301).
- Optimized compiler's lexical analysis phase, reducing parse times by approximately 10% on average (fix #1867).

### Documentation

- Updated documentation for async/await syntax, previous examples was using deprecated callback style.
- Revised `docs/migration/1.1-to-1.2.md` to include string encoding migration details (reported by John Smith <jsmith@email.com>).

Reported issues and contributions by our dedicated community have been invaluable in this release. Thank you for your support and feedback!
```
