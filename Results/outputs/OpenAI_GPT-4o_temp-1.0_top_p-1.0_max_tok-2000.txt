```markdown
# Brush Language - Version 1.2.0 Release Notes

Released: January 15, 2025

## Overview

Version 1.2 of the Brush programming language comes with significant performance boosts, robust new features, and several bug fixes that optimize your development experience. We've listened to user feedback and focused on enhancing language stability and efficiency. This release streamlines many core operations while introducing innovative capabilities to facilitate modern software development.

Brush 1.2 is compatible with modules from the 1.1.x series, with improvements ensuring a smoother and faster coding experience. We're excited to introduce asynchronous programming enhancements and more optimized data handling routines that will greatly benefit both new and seasoned developers.

For a complete list of fixes and updates, please refer to the [CHANGELOG_1.2.md](./CHANGELOG_1.2.md).

## Highlights

### Enhanced Asynchronous Programming Capabilities

Developers can now leverage better asynchronous patterns using the new `brush.async.timeout(duration: int, callback: fn)` function. This addition employs a lightweight event loop that reduces overhead, resulting in a 15% reduction in runtime latency. These improvements are vital for applications with concurrent processing needs.

### Optimized String Operations

This release brings a 23% boost in performance for string interpolation, particularly beneficial when handling strings with ten or more variables. The underlying mechanism recalibrates memory allocation to minimize copy overhead and speed up execution.

```python
message = f"Hello, {username} has {unread_messages} unread messages."
```

### Advanced Type Inference

Version 1.2 introduces refined type inference for generic functions. The compiler now implements bidirectional type-checking during the constraint resolution phase, simplifying type management and reducing the necessity for explicit type annotations.

### Improved Garbage Collection

Memory management is now more robust with the enhanced garbage collector that efficiently handles concurrent object allocations. The garbage collector features optimized sweep phases, decreasing memory fragmentation by 27%. 

## Breaking Changes ⚠️

⚠️ **String Encoding Change**: Transitioning from UTF-8 to UTF-16 for improved Windows compatibility requires developers to adjust any byte-level string operations. For migration guides, see docs/migration/1.1-to-1.2.md.

## Bug Fixes

This release resolves several key bugs as referenced in the [CHANGELOG_1.2.md](./CHANGELOG_1.2.md). These improvements stabilize core language features and fix various compiler and runtime issues reported by our community.

## Performance Improvements

- **Compile Time**: Experiments show a 15% reduction in compile time due to improved dependency resolution and optimized AST generation.
- **Binary Size**: The average binary size has been reduced by 40%, notably decreasing load times and the memory footprint.

## Deprecation Notices

We intend to deprecate the legacy I/O module in version 1.3.0. Developers are advised to transition to the new standardized I/O operations introduced in version 1.1.

## Installation & Upgrade

Upgrading to version 1.2 is straightforward through our package manager. Ensure compatibility checks, especially if upgrading from versions prior to 1.1.x, by following the provided migration notes.

## Dependencies

- **LLVM**: Requires LLVM 15.0+
- **GCC**: Compatible with GCC 11+
- **Runtime Footprint**: Reduced from 8MB to 5.2MB

---

# CHANGELOG_1.2.md

## [1.2.0] - 2025-01-15

### Added
- Introduced `brush.async.timeout(duration: int, callback: fn)` for more efficient handling of non-blocking operations (#1895).
- Added new lens utility functions for state management, improving code conciseness in reactive paradigms. 

### Changed
- Updated the string interpolation logic to handle variables more efficiently. Now yields a 23% performance improvement in interpolation tasks (#1901).
- Overhauled the import resolution algorithm to reduce initial compile times by up to 15%. The resolver now implements lazy loading of modules [BRH-310].

### Fixed
- Fixed a compiler crash in `parseExpression()` when handling deeply nested scopes under specific edge cases (fixes #1933).
- Memory leak was addressed in the garbage collector during concurrent object allocation. Reported by John Smith <jsmith@email.com>.
- Corrected error code E0308 being thrown incorrectly during type unification checks [BRH-302].
- Resolved a SEGFAULT during the runtime execution of async handlers, triggered by unhandled exceptions in callbacks (#1886). Fixed by Sarah Chen <s.chen@brushlang.org>.
- Fixed erroneous stack trace reporting in `cstdlib.trace()` that affected debugging accuracy [#1945].

### Security
- Patched a vulnerability in the lexer where malformed input could lead to unintended token state transitions, potentially exploitable (fixes #1850).

### Deprecated
- Marked the legacy `stdlib/io.brush` module for deprecation; developers should transition to the newer I/O methods for future-proofing codebases.
  
### Performance
- Enhanced garbage collector efficiency, effectively reducing fragmentation by 27% during heavy multi-threaded operations.

### Documentation
- Updated all standard library documentation to reflect changes in the public API. Previous inaccuracies in async usage examples have been corrected.

Thanks to Mike Torres for reporting a critical bug in Token.IDENTIFIER parsing that impacted certain combined character sets [#1867].

---
```
