**VERSION_1.2.md**
# Brush Language - Version 1.2.0 Release Notes
Released: January 15, 2025

## Overview
This release includes several significant improvements to the Brush language, focusing on enhancing the developer experience, improving performance, and expanding the language's capabilities. Version 1.2 brings a more robust type inference system, improved async/await syntax, and numerous bug fixes. We're excited to introduce these features, which have been highly anticipated by the community.

The Brush language continues to evolve, with a strong emphasis on compatibility and backward support. Brush 1.2 is compatible with 1.1.x modules, ensuring a smooth transition for existing projects. Our team has worked diligently to address community feedback, and this release reflects our commitment to creating a more efficient, expressive, and enjoyable programming language.

## Highlights
* **Enhanced Type Inference**: Version 1.2 introduces a more sophisticated type inference system for generic functions, reducing the need for explicit type annotations. The compiler now performs bidirectional type checking, allowing it to infer complex generic types from context. This improvement is particularly noticeable in functional programming patterns involving higher-order functions and closures.
* **Improved Async/Await Syntax**: The async/await syntax has been updated to support more expressive and readable asynchronous code. Developers can now write asynchronous functions with ease, using the `brush.async.timeout()` function to manage timeouts and callbacks.
* **Performance Improvements**: This release includes several performance optimizations, resulting in a 15% reduction in compile time and a 40% smaller binary size. The runtime footprint has been reduced from 8MB to 5.2MB, making Brush a more lightweight and efficient language.
* **Updated Dependencies**: Brush 1.2 requires LLVM 15.0+ and is compatible with GCC 11+. The updated dependencies ensure better support for modern hardware and software architectures.

## Breaking Changes
⚠️ **String Encoding Change**: The default string encoding has changed from UTF-8 to UTF-16 for Windows compatibility. Existing code that relies on byte-level string operations may need adjustment. See migration guide in [docs/migration/1.1-to-1.2.md](docs/migration/1.1-to-1.2.md) for more information.

## Bug Fixes
For a complete list of fixes, see [CHANGELOG_1.2.md](CHANGELOG_1.2.md). This release addresses numerous bugs and issues reported by the community, including fixes for the compiler, runtime, and standard library.

## Performance Improvements
In addition to the compile-time and binary size reductions, this release includes several other performance optimizations. The `gc_collect()` function has been improved to reduce memory allocation overhead, and the `parseExpression()` function now uses a more efficient parsing algorithm.

## Deprecation Notices
The following features are deprecated and will be removed in future versions:
* The `Token.IDENTIFIER` type will be replaced with `Token.Symbol` in version 1.3.
* The `stdlib/io.brush` module will be removed in version 1.4, in favor of the new `stdlib/fs.brush` module.

## Installation & Upgrade
To upgrade to Brush 1.2, simply download the latest installer from the official website. For migration guidance, see the [migration guide](docs/migration/1.1-to-1.2.md). Developers upgrading from 1.1.x should note that the default string encoding has changed, and existing code may need adjustment.

## Dependencies
Brush 1.2 requires the following dependencies:
* LLVM 15.0+
* GCC 11+
* Git 2.34+

---
**CHANGELOG_1.2.md**
## [1.2.0] - 2025-01-15

### Added
* Fix support for nested lambda expressions with closure capture (fixes #1847)
* Update documentation for async/await syntax, previous examples was using deprecated callback style
* Added new `brush.async.timeout()` function for managing timeouts and callbacks

### Changed
* Update `parseExpression()` function to use more efficient parsing algorithm
* Change default string encoding to UTF-16 for Windows compatibility (fixes #203)
* Improve `gc_collect()` function to reduce memory allocation overhead

### Fixed
* Fix compiler crash when using nested lambda expressions with closure capture (fixes #1847)
* Resolved SEGFAULT in garbage collector during concurrent object allocation (Reported by Emma Rodriguez <e.rodriguez@techcorp.io>)
* Fix bug in `Token.IDENTIFIER` type, which was causing incorrect parsing (fixes #2301)

### Security
* Patched security vulnerability in `stdlib/io.brush` module (fixes #2401)
* Update dependencies to address known security issues (LLVM 15.0+, GCC 11+)

### Performance
* Performance improvement in string interpolation - now 23% faster for strings with 10+ variables (#2301)
* Reduce memory allocation overhead in `gc_collect()` function

### Documentation
* Update documentation for async/await syntax, previous examples was using deprecated callback style
* Add new documentation for `brush.async.timeout()` function

### Deprecated
* The `Token.IDENTIFIER` type will be replaced with `Token.Symbol` in version 1.3
* The `stdlib/io.brush` module will be removed in version 1.4, in favor of the new `stdlib/fs.brush` module

Thanks to John Smith <jsmith@email.com> for reporting several issues, and to Mike Torres for helping with the migration guide. Fixed by Sarah Chen <s.chen@brushlang.org>.