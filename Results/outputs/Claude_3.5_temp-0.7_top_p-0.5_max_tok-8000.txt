# VERSION_1.2.md

# Brush Language - Version 1.2.0 Release Notes

Released: March 8, 2025

## Overview

Brush 1.2.0 represents a significant milestone in the language's evolution, focusing on performance optimization, developer ergonomics, and ecosystem stability. This release introduces several new language features while substantially improving the compiler's type system and runtime performance.

We're excited to introduce the new async/await syntax, making asynchronous programming in Brush more intuitive and maintainable. Additionally, version 1.2 brings important memory management improvements, reducing application footprint and improving garbage collection efficiency across all supported platforms.

## Highlights

### Async/Await Pattern

Brush now supports first-class async/await syntax for asynchronous programming, replacing the callback-based approach. The runtime implements this feature using a cooperative task scheduler that efficiently manages execution contexts without blocking the main thread. Developers can leverage this feature with minimal overhead using the new `brush.async` module.

```brush
async fn fetchData(url: string) -> Result<Data, Error> {
    let response = await http.get(url);
    return response.parse();
}
```

### Enhanced Type Inference

Version 1.2 introduces enhanced type inference for generic functions, significantly reducing the need for explicit type annotations. The compiler now performs bidirectional type checking during the constraint resolution phase, allowing it to infer complex generic types from context. This improvement is particularly noticeable in functional programming patterns involving higher-order functions and closures.

```brush
// Before 1.2:
let result = map<int, string>(numbers, (n: int): string => n.toString());

// Now in 1.2:
let result = map(numbers, n => n.toString());
```

### Pattern Matching Enhancements

Pattern matching has been extended to support destructuring in more contexts, including function parameters and variable declarations. The compiler now optimizes pattern matching into efficient jump tables when appropriate, resulting in a 35% performance improvement for match expressions with many cases.

### Improved Error Messages

Compiler error messages have been completely redesigned to provide more context, suggested fixes, and relevant code snippets. The new diagnostic engine pinpoints exact locations of type mismatches and offers specific guidance on how to resolve common issues.

### Memory Management Optimizations

The garbage collector has been rewritten to use a generational approach with concurrent marking, reducing GC pauses by up to 70% in benchmark applications. Runtime footprint has been reduced from 8.4MB to 5.7MB on average, with proportional improvements in memory usage during program execution.

## Breaking Changes

⚠️ **String Encoding Change**: The default string encoding has changed from UTF-8 to UTF-16 for Windows compatibility. Existing code that relies on byte-level string operations may need adjustment. See migration guide in docs/migration/1.1-to-1.2.md.

⚠️ **Module Resolution**: The module resolution algorithm now prioritizes local modules over global ones when names conflict. Code that relied on implicit global module imports may need to be updated with explicit imports.

## Bug Fixes

Version 1.2 addresses 32 bugs, including several critical issues in the compiler, standard library, and runtime. Key fixes include resolving memory leaks in the garbage collector, fixing parser crashes with nested lambda expressions, and correcting type inference issues with generic functions. For a complete list of fixes, see CHANGELOG_1.2.md.

## Performance Improvements

- **Compiler Speed**: Compilation times reduced by 22% through improved incremental compilation and parallel processing.
- **Runtime Performance**: Overall application performance improved by 15-18% in benchmarks through optimized memory access patterns and reduced indirection.
- **String Operations**: String interpolation and concatenation are now 23% faster for operations involving multiple variables.
- **Binary Size**: Optimized code generation results in 12% smaller executable sizes on average.

## Deprecation Notices

The following features are deprecated in 1.2 and will be removed in version 1.3:

- The `brush.util.callback` module is deprecated in favor of the new async/await syntax.
- Legacy string functions in `brush.string.legacy` should be replaced with their UTF-16 aware counterparts.
- The `--old-gc` compiler flag will be removed as the new garbage collector is now the default.

## Installation & Upgrade

Brush 1.2 is compatible with 1.1.x modules but requires recompilation for optimal performance. To upgrade:

```bash
brush update --version 1.2.0
brush migrate --from 1.1 --to 1.2 ./your-project
```

Developers upgrading from 1.1.x should note that the new module resolution system may require explicit imports for previously implicit dependencies. The migration tool will identify and suggest fixes for most common issues.

## Dependencies

- Requires LLVM 16.0+ for optimal performance
- Compatible with GCC 12+ and Clang 14+
- Windows builds now require Visual Studio 2022 or newer
- Standard library now uses libuv 1.44.2 for async I/O operations

For a complete list of changes and detailed migration guidance, please refer to the official documentation at https://docs.brushlang.org/1.2/

---

# CHANGELOG_1.2.md

## [1.2.0] - 2025-03-08

### Added

- Added async/await syntax for asynchronous programming. This replaces the callback-based approach with a more intuitive syntax using the new `brush.async` module. (#1842)

- Implemented pattern matching on function parameters and variable declarations. The compiler now optimizes match expressions into efficient jump tables when appropriate. [BRH-291]

- Added new `Result<T, E>` type to standard library for better error handling. This type works seamlessly with the try/catch mechanism and new async/await pattern. (fixes #1856)

- New diagnostic engine for improved compiler error messages. Error messages now include suggested fixes and relevant code snippets to help developers resolve issues faster. (#1901)

### Changed

- Update string encoding from UTF-8 to UTF-16 for better Windows compatibility. ⚠️ This is a breaking change for code that relies on byte-level string operations. [BRH-302]

- Changed module resolution to prioritize local modules over global ones when names conflict. This may require updates to code that relied on implicit global imports. (#1878)

- Refactored the standard library's IO functions to use the async pattern internally. Legacy synchronous functions now use the async versions with immediate awaiting. Thanks to Mike Torres for implementation assistance.

### Fixed

- Fixed compiler crash when using nested lambda expressions with closure capture. The issue occurred in `eval_context()` when scope resolution failed for shadowed variables (fixes #1847).

- Resolved SEGFAULT in garbage collector during concurrent object allocation. The error manifested as `SEGFAULT_0x7f` in multithreaded applications with high allocation rates. Reported by Emma Rodriguez <e.rodriguez@techcorp.io>

- Fix type inference failure with generic functions that return complex types. The compiler would incorrectly report error E0308 "mismatched types" when return type involved multiple type parameters. (#1862)

- Fixed memory leak in the standard library's `HashMap` implementation. The leak occurred when rehashing maps with custom object keys that didn't properly implement the `hash()` method. [BRH-315]

- Patched parser to correctly handle multiline string literals with escape sequences. Previously caused ERR_INVALID_TOKEN when a multiline string contained escaped quotes. (#1883)

- Fix incorrect line numbers in stack traces for files with Unicode characters. Stack traces like `at brush.runtime.eval:142` would point to wrong locations in source files. Reported by John Smith <jsmith@email.com>

### Performance

- Rewrote garbage collector to use a generational approach with concurrent marking. This reduces GC pauses by up to 70% in benchmark applications. (#1890)

- Performance improvement in string interpolation - now 23% faster for strings with 10+ variables (#2301)

- Optimized the compiler's type checking phase, resulting in 22% faster compilation times. The improvement is most noticeable in projects with extensive use of generics. [BRH-320]

- Reduced runtime memory footprint from 8.4MB to 5.7MB through more efficient data structures in the standard library. Fixed by Sarah Chen <s.chen@brushlang.org>

### Security

- Fixed potential buffer overflow in `parseExpression()` when handling deeply nested expressions. This vulnerability could allow arbitrary code execution in the compiler (CVE-2025-1234).

- Addressed integer overflow in `Token.IDENTIFIER` handling that could cause denial of service. The issue was in src/compiler/lexer.br when processing extremely long identifiers. (#1905)

### Documentation

- Update documentation for async/await syntax, previous examples was using deprecated callback style

- Improved API reference for the standard library with more code examples and clearer explanations. (#1910)

- Fixed broken links and outdated information in the stdlib/io.brush documentation. Thanks to Lisa Wang for reporting.