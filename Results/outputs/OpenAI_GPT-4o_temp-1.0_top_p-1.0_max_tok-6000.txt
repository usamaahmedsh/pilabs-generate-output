```markdown
# Brush Language - Version 1.2.0 Release Notes
Released: January 15, 2025

## Overview

Version 1.2 of the Brush programming language marks a significant milestone in our continuous journey to enhance performance and developer productivity. This release introduces pivotal new features, optimizations, and critical bug fixes, driven by community feedback and our dedication to excellence. Developers can now enjoy a more intuitive syntax and robust runtime environment, making Brush even more reliable and efficient.

In this release, we've focused extensively on improving the type system and overall language performance. The introduction of new async functionalities streamlines concurrent programming, and the library upgrades ensure broader compatibility and enhanced security. We're excited to introduce these advancements, which exemplify our commitment to a high-efficiency, user-friendly programming experience. For a complete list of changes, please refer to [CHANGELOG_1.2.md](CHANGELOG_1.2.md).

## Highlights

### Enhanced Type Inference System

Version 1.2 enhances type inference for generic functions, minimizing the necessity for explicit type annotations. The compiler employs bidirectional type checking during constraint resolution, efficiently inferring complex generic types from the surrounding context. This improvement is evident in patterns involving higher-order functions and consolidated closures.

### new async/await functionality

Brush 1.2 introduces the `async/await` syntax, allowing developers to write asynchronous code more naturally. With functions like `brush.async.timeout(duration: int, callback: fn)`, you can handle asynchronous operations seamlessly without convoluted callback patterns. This feature reduces code complexity in I/O-bound programs and enhances readability.

```brush
async fn fetch_data() {
    let data = await network_request();
    process(data);
}
```

### Optimized String Interpolation

String interpolation has been revamped to deliver a 23% speed gain in cases with multiple variable substitutions. By refining memory management and optimizing interpolation parsing, developers can expect faster string operations, significantly in computationally intensive tasks.

### Smaller Runtime Footprint

A series of memory optimizations have reduced the Brush runtime footprint from 8MB to just 5.2MB. By streamlining internal data structures and refining garbage collection processes, this update promises more efficient memory utilization, directly impacting application performance.

## Breaking Changes

⚠️ **String Encoding Change**: The default string encoding is now UTF-16 to improve Windows compatibility. This may affect byte-level string operations in existing codebases. Migration guidelines are provided in `docs/migration/1.1-to-1.2.md`.

## Bug Fixes

This release resolves numerous issues identified in version 1.1.x, aiming to enhance overall stability and reliability. For a detailed account of bug fixes, see the [CHANGELOG_1.2.md](CHANGELOG_1.2.md) file.

## Performance Improvements

Across-the-board performance enhancements include a 15% reduction in compile time and a 40% decrease in binary size, thanks to refined compilation processes and aggressive optimization strategies. Benchmark tests confirm compatibility improvements for GCC 11+ and LLVM 15.0+.

## Deprecation Notices

Notice on Future Removals: Several legacy File I/O operations will be removed in version 1.3. Developers should migrate to using the new `stdlib/io.brush` APIs.

## Installation & Upgrade

Upgrading to version 1.2 from 1.1.x requires recompilation of modules due to core library updates. Refer to the installation guide for step-by-step upgrade instructions, ensuring seamless transitions in your development environment.

## Dependencies

Version 1.2 updates include:
- Enabled support for GCC 11+ and LLVM 15.0+
- Upgraded standard library modules for enhanced security and compatibility.


---

# CHANGELOG_1.2.md
## [1.2.0] - 2025-01-15

### Added
- Introduced `async/await` functionality, simplifying asynchronous programming with `brush.async.timeout(duration: int, callback: fn)`.
- New module `stdlib/date.brush` for enhanced date and time functionalities (#1875).

### Changed
- Optimized type inference in generic functions, reducing need for explicit annotations (fixes #1912).
- Refactored garbage collector to improve memory management and reduce latency.

### Fixed
- Addressed a critical issue causing SEGFAULT in concurrent garbage collection during object reallocation. (Reported by Maria Lopez <mlopez@brushlang.dev>)
- Resolved compiler panic with nested lambda expressions within multiple closure contexts. (fixes #1849)
- Corrected error in `parseExpression()` function causing incorrect AST generation in complex ternary operations.

### Security
- Patched vulnerability in `stdlib/net.brush` module allowing unauthorized memory access. (Thanks to Kevin O'Reilly for reporting this issue)

### Deprecated
- Marked `stdlib/io.legacy.brush` functions for deprecation, in favor of new `stdlib/io.brush` APIs. Removal scheduled for version 1.3.

### Performance
- Improved performance in string interpolation by 23% for strings with multiple substitutions. (#2306)
- Reduced runtime footprint from 8MB to 5.2MB through memory optimizations.

### Documentation
- Updated async usage guide to reflect the new `async/await` syntax.

### Miscellaneous
- Minor corrections in code comments in src/compiler/lexer.br
- Improved stack trace readability for exceptions in brush.runtime.eval:142

(Note: This changelog includes highlights only. For exhaustive list of changes, see issue tracker #1840-#1950)
```
